import praw
import random
import socket
import sys
import pandas as pd
import datetime as dt


def receive_connection():
    """Wait for and then return a connected socket..

    Opens a TCP connection on port 8080, and waits for a single client.

    """
    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    server.bind(('localhost', 8080))
    server.listen(1)
    client = server.accept()[0]
    server.close()
    return client


def send_message(client, message):
    """Send message to client and close the connection."""
    print(message)
    client.send('HTTP/1.1 200 OK\r\n\r\n{}'.format(message).encode('utf-8'))
    client.close()


def main():
    """Provide the program's entry point when directly executed."""
    print('Go here while logged into the account you want to create a '
          'token for: https://www.reddit.com/prefs/apps/')
    print('Click the create an app button. Put something in the name '
          'field and select the script radio button.')
    print('Put http://localhost:8080 in the redirect uri field and '
          'click create app')
    client_id = input('Enter the client ID, it\'s the line just under '
                      'Personal use script at the top: ')
    client_secret = input('Enter the client secret, it\'s the line next '
                          'to secret: ')
    commaScopes = input('Now enter a comma separated list of scopes, or '
                        'all for all tokens: ')

    if commaScopes.lower() == 'all':
        scopes = ['*']
    else:
        scopes = commaScopes.strip().split(',')

    reddit = praw.Reddit(client_id=client_id.strip(),
                         client_secret=client_secret.strip(),
                         redirect_uri='http://localhost:8080',
                         user_agent='praw_refresh_token_example')
    state = str(random.randint(0, 65000))
    url = reddit.auth.url(scopes, state, 'permanent')
    print('Now open this url in your browser: '+url)
    sys.stdout.flush()

    client = receive_connection()
    data = client.recv(1024).decode('utf-8')
    param_tokens = data.split(' ', 2)[1].split('?', 1)[1].split('&')
    params = {key: value for (key, value) in [token.split('=')
                                              for token in param_tokens]}

    if state != params['state']:
        send_message(client, 'State mismatch. Expected: {} Received: {}'
                     .format(state, params['state']))
        return 1
    elif 'error' in params:
        send_message(client, params['error'])
        return 1

    refresh_token = reddit.auth.authorize(params['code'])
    send_message(client, 'Refresh token: {}'.format(refresh_token))
    return 0


if __name__ == '__main__':
    sys.exit(main())


# In[1]:


reddit = praw.Reddit(client_id='',
                     client_secret="", password='PASSWORD-MATHESIS',
                     user_agent='ThesisMA', username='USERNAME-MATHESIS', refresh_token='')
print(reddit.user.me())


# In[2]:


subreddit = reddit.subreddit('paragon')
subreddit


# In[3]:


creation=subreddit.created
creation


# In[4]:


topics_dict = { "title":[],                "score":[],                "id":[],               "url":[],                "comms_num": [],                "created": [],                "body":[]}


# In[5]:


for submission in subreddit.controversial(limit=1000):
    topics_dict["title"].append(submission.title)
    topics_dict["score"].append(submission.score)
    topics_dict["id"].append(submission.id)
    topics_dict["url"].append(submission.url)
    topics_dict["comms_num"].append(submission.num_comments)
    topics_dict["created"].append(submission.created)
    topics_dict["body"].append(submission.selftext)

    len(topics_dict["title"])


# In[6]:


topics_data = pd.DataFrame(topics_dict)


# In[8]:


topics_data = pd.DataFrame(topics_dict)

def get_date(submission):
    time = submission
    return dt.datetime.fromtimestamp(time)

timestamps = topics_data["created"].apply(get_date)

topics_data = topics_data.assign(timestamp = timestamps)


# In[9]:


topics_data.info()


# In[11]:


topics_data = pd.DataFrame(topics_dict)

def get_date(submission):
    time = submission
    return dt.datetime.fromtimestamp(time)

timestamps = topics_data["created"].apply(get_date)

topics_data = topics_data.assign(timestamp = timestamps)


# In[12]:


comms_dict = { "topic": [], "body":[], "comm_id":[], "created":[] }


# In[25]:


from praw.models import MoreComments
iteration = 1
for topic in topics_data["id"]:
    print(str(iteration))
    iteration += 1
    submission = reddit.submission(id=topic)
    for top_level_comment in submission.comments:
        if isinstance(top_level_comment, MoreComments):
            continue
print("done")


# In[26]:


comms_dict


# In[27]:


comms_data = pd.DataFrame.from_dict(comms_dict,orient='index')
comms_data


# In[62]:


Pcomms_data=comms_data.T
Pcomms_data


# In[63]:


Pcomms_data[["created"]] = Pcomms_data[["created"]].apply(pd.to_numeric)
Pcomms_data


# In[64]:


Pcomms_data.fillna(0, inplace=True)
Pcomms_data


# In[65]:


timestamps = Pcomms_data["created"].apply(get_date)

Pcomms_data = Pcomms_data.assign(timestamp = timestamps)
Pcomms_data


# In[68]:


Pcomms_data.to_csv("subreddit_paragon_comments.csv")


# In[67]:


topics_data.to_csv("subreddit_paragon_topics.csv")
